{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anish\\\\Desktop\\\\Anibot\\\\code\\\\ottonomy\\\\client\\\\src\\\\components\\\\GraphEditor.jsx\",\n  _s = $RefreshSig$();\n// client/src/components/GraphEditor.jsx\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport \"./GraphEditor.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphEditor = () => {\n  _s();\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const [history, setHistory] = useState([]); // Stack for undo/redo\n  const [future, setFuture] = useState([]); // Stack for redo\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const nodesResponse = await axios.get(\"/api/graph/nodes\");\n        const edgesResponse = await axios.get(\"/api/graph/edges\");\n        setNodes(nodesResponse.data);\n        setEdges(edgesResponse.data);\n      } catch (error) {\n        console.error(\"Error fetching data: \", error);\n      }\n    };\n    fetchData();\n  }, []);\n  const addNode = async (x, y) => {\n    const newNode = {\n      name: `Node ${nodes.length + 1}`,\n      x,\n      y\n    };\n    try {\n      const response = await axios.post(\"/api/graph/nodes\", newNode);\n      setNodes([...nodes, response.data]);\n      setHistory([...history, {\n        action: \"add\",\n        node: response.data\n      }]); // Add to history\n      setFuture([]); // Clear future on new action\n    } catch (error) {\n      console.error(\"Error adding node: \", error);\n    }\n  };\n  const undo = () => {\n    const lastAction = history.pop();\n    if (!lastAction) return;\n    setHistory([...history]);\n    setFuture([lastAction, ...future]);\n    if (lastAction.action === \"add\") {\n      setNodes(nodes.filter(node => node._id !== lastAction.node._id)); // Remove last added node\n    }\n    // Implement undo for other actions (update, delete) here\n  };\n  const redo = () => {\n    const nextAction = future.shift();\n    if (!nextAction) return;\n    setHistory([...history, nextAction]);\n    setFuture([...future]);\n    if (nextAction.action === \"add\") {\n      setNodes([...nodes, nextAction.node]); // Add back the undone node\n    }\n    // Implement redo for other actions (update, delete) here\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"graph-editor\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graph-canvas\",\n      children: nodes.map(node => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"node\",\n        style: {\n          left: node.x,\n          top: node.y\n        },\n        draggable: true,\n        onDragEnd: e => handleDragNode(node._id, e.clientX, e.clientY),\n        children: node.name\n      }, node._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => addNode(100, 100),\n      children: \"Add Node\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: undo,\n      children: \"Undo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: redo,\n      children: \"Redo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n\n// client/src/components/GraphEditor.jsx\n_s(GraphEditor, \"bhM1KZWBYk5idLG+oFpgVHYvzKk=\");\n_c = GraphEditor;\nconst addEdge = async (fromNodeId, toNodeId) => {\n  try {\n    const newEdge = {\n      fromNodeId,\n      toNodeId\n    };\n    await axios.post(\"/api/graph/edges\", newEdge);\n    setEdges([...edges, newEdge]);\n  } catch (error) {\n    console.error(\"Error adding edge: \", error);\n  }\n};\n\n// In JSX, draw edges between nodes (for example, using SVG lines)\n\nexport default GraphEditor;\nvar _c;\n$RefreshReg$(_c, \"GraphEditor\");","map":{"version":3,"names":["React","useEffect","useState","axios","jsxDEV","_jsxDEV","GraphEditor","_s","nodes","setNodes","edges","setEdges","history","setHistory","future","setFuture","fetchData","nodesResponse","get","edgesResponse","data","error","console","addNode","x","y","newNode","name","length","response","post","action","node","undo","lastAction","pop","filter","_id","redo","nextAction","shift","className","children","map","style","left","top","draggable","onDragEnd","e","handleDragNode","clientX","clientY","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","addEdge","fromNodeId","toNodeId","newEdge","$RefreshReg$"],"sources":["C:/Users/anish/Desktop/Anibot/code/ottonomy/client/src/components/GraphEditor.jsx"],"sourcesContent":["// client/src/components/GraphEditor.jsx\r\nimport React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./GraphEditor.css\";\r\n\r\nconst GraphEditor = () => {\r\n  const [nodes, setNodes] = useState([]);\r\n  const [edges, setEdges] = useState([]);\r\n  const [history, setHistory] = useState([]);  // Stack for undo/redo\r\n  const [future, setFuture] = useState([]);    // Stack for redo\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const nodesResponse = await axios.get(\"/api/graph/nodes\");\r\n        const edgesResponse = await axios.get(\"/api/graph/edges\");\r\n        setNodes(nodesResponse.data);\r\n        setEdges(edgesResponse.data);\r\n      } catch (error) {\r\n        console.error(\"Error fetching data: \", error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  const addNode = async (x, y) => {\r\n    const newNode = { name: `Node ${nodes.length + 1}`, x, y };\r\n    try {\r\n      const response = await axios.post(\"/api/graph/nodes\", newNode);\r\n      setNodes([...nodes, response.data]);\r\n      setHistory([...history, { action: \"add\", node: response.data }]);  // Add to history\r\n      setFuture([]);  // Clear future on new action\r\n    } catch (error) {\r\n      console.error(\"Error adding node: \", error);\r\n    }\r\n  };\r\n\r\n  const undo = () => {\r\n    const lastAction = history.pop();\r\n    if (!lastAction) return;\r\n    setHistory([...history]);\r\n    setFuture([lastAction, ...future]);\r\n    if (lastAction.action === \"add\") {\r\n      setNodes(nodes.filter(node => node._id !== lastAction.node._id)); // Remove last added node\r\n    }\r\n    // Implement undo for other actions (update, delete) here\r\n  };\r\n\r\n  const redo = () => {\r\n    const nextAction = future.shift();\r\n    if (!nextAction) return;\r\n    setHistory([...history, nextAction]);\r\n    setFuture([...future]);\r\n    if (nextAction.action === \"add\") {\r\n      setNodes([...nodes, nextAction.node]); // Add back the undone node\r\n    }\r\n    // Implement redo for other actions (update, delete) here\r\n  };\r\n\r\n  return (\r\n    <div className=\"graph-editor\">\r\n      <div className=\"graph-canvas\">\r\n        {nodes.map((node) => (\r\n          <div\r\n            key={node._id}\r\n            className=\"node\"\r\n            style={{ left: node.x, top: node.y }}\r\n            draggable\r\n            onDragEnd={(e) => handleDragNode(node._id, e.clientX, e.clientY)}\r\n          >\r\n            {node.name}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <button onClick={() => addNode(100, 100)}>Add Node</button>\r\n      <button onClick={undo}>Undo</button>\r\n      <button onClick={redo}>Redo</button>\r\n    </div>\r\n  );\r\n};\r\n\r\n// client/src/components/GraphEditor.jsx\r\n\r\nconst addEdge = async (fromNodeId, toNodeId) => {\r\n  try {\r\n    const newEdge = { fromNodeId, toNodeId };\r\n    await axios.post(\"/api/graph/edges\", newEdge);\r\n    setEdges([...edges, newEdge]);\r\n  } catch (error) {\r\n    console.error(\"Error adding edge: \", error);\r\n  }\r\n};\r\n\r\n// In JSX, draw edges between nodes (for example, using SVG lines)\r\n\r\n\r\nexport default GraphEditor;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}